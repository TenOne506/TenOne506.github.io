import{_ as i,c as a,a as n,o as h}from"./app-Qg1dpqDJ.js";const l={};function k(e,s){return h(),a("div",null,s[0]||(s[0]=[n(`<h2 id="得到k个黑块的最少涂色次数" tabindex="-1"><a class="header-anchor" href="#得到k个黑块的最少涂色次数"><span><a href="https://leetcode.cn/problems/minimum-recolors-to-get-k-consecutive-black-blocks/description/" target="_blank" rel="noopener noreferrer">得到K个黑块的最少涂色次数</a></span></a></h2><p>给你一个长度为<code>n</code>下标从<code>0</code>开始的字符串<code>blocks</code>，<code>blocks[i]</code>要么是<code>W</code>要么是<code>B</code>，表示第<code>i</code>块的颜色。字符<code>W</code>和<code>B</code>分别表示白色和黑色。</p><p>给你一个整数<code>k</code>，表示想要 <strong>连续</strong> 黑色块的数目。</p><p>每一次操作中，你可以选择一个白色块将它 涂成 黑色块。</p><p>请你返回至少出现一次连续<code>k</code>个黑色块的 <strong>最少</strong> 操作次数。</p><div class="demo-wrapper"><div class="demo-head"><div class="demo-ctrl"><i></i><i></i><i></i></div></div><div class="demo-container"><p>示例 1：<br> 输入：blocks = &quot;WBBWWBBWBW&quot;, k = 7<br> 输出：3<br> 解释：<br> 一种得到 7 个连续黑色块的方法是把第 0 ，3 和 4 个块涂成黑色。<br> 得到 blocks = &quot;BBBBBBBWBW&quot; 。<br> 可以证明无法用少于 3 次操作得到 7 个连续的黑块。<br> 所以我们返回 3 。<br> 示例 2：<br> 输入：blocks = &quot;WBWBBBW&quot;, k = 2<br> 输出：0<br> 解释：<br> 不需要任何操作，因为已经有 2 个连续的黑块。 所以我们返回 0 。</p></div></div><p>这题思路其实也是滑动窗口，但是需要注意的是，需要记录窗口中白色块的数量，然后每次移动窗口时，需要更新窗口中需要涂黑的白色块的数量。 其中可以优化的点，就是在里面如何少用if判断。if判断会影响程序的性能。</p><p>对于本题，可以把 <code>W</code> 看成 1，把 <code>B</code> 看成 0，这恰好是它们 ASCII 码二进制最低位的值。其中，<code>W</code> 的 ASCII 码为 87，<code>B</code> 的 ASCII 码为 66。</p><p>但是这种优化方法往往会降低可读性，尽量不要在业务代码中使用。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">class</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;"> Solution</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> {</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">public</span><span style="--shiki-light:#5C6A72;--shiki-dark:#54B9FF;">:</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">  int</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;"> minimumRecolors</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">string</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> blocks</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">,</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;"> int</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> k</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">)</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> {</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">    int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> cntw </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;">0</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">;</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">    for</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> i</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;">0</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">;i</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">k;</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">++</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">i){</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">      cntw </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">+=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;"> blocks</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[i] </span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&amp;</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;"> 1</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">;</span><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">//计算W涂黑的操作</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    }</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">    int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> res </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> cntw;</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">    for</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> i </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> k;i</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">blocks</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">size</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">++</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">i){</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">      cntw </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">+=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">blocks</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[i]</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&amp;</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;">1</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">) </span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">-</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> (</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">blocks</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[i</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">-</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">k]</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&amp;</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;">1</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">);</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">      res</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">min</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(res,cntw);</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    }</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">    return</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> res;</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">  }</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const p=i(l,[["render",k]]),d=JSON.parse('{"path":"/code/cc0i3555/","title":"得到K个黑块的最少涂色次数","lang":"zh-CN","frontmatter":{"title":"得到K个黑块的最少涂色次数","createTime":"2025/01/04 21:53:23","permalink":"/code/cc0i3555/"},"readingTime":{"minutes":1.66,"words":498},"git":{"updatedTime":1735999698000,"contributors":[{"name":"TenThousandOne","username":"TenThousandOne","email":"w13852770506@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TenThousandOne?v=4","url":"https://github.com/TenThousandOne"}],"changelog":[{"hash":"a564f79b16ecabc04c77289b480fb28db490d3b6","time":1735999698000,"email":"w13852770506@163.com","author":"TenThousandOne","message":"寒假每日一题更新"}]},"filePathRelative":"notes/code/滑动窗口/得到K个黑块的最少涂色次数.md","headers":[]}');export{p as comp,d as data};
