import{_ as s,c as a,a as e,o as l}from"./app-Qg1dpqDJ.js";const n={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h2 id="llvm" tabindex="-1"><a class="header-anchor" href="#llvm"><span>LLVM</span></a></h2><p>LLVM 就是一个开源的编译器基础设施，它的目标是为了开发新的编译器和优化器。它的设计目标是可以在不同的平台上运行，并且可以支持多种编程语言。<br> LLVM 项目起源于 2000 年伊利诺伊大学厄巴纳-香槟分校的维克拉姆·艾夫(Vikram Adve)和克里斯·拉特纳(Chris Lattner)的研究，旨在为所有静态和动态语言创建动态编译技术。LLVM 是以 BSD 许可证开发的开源软件。2005 年，苹果公司雇用了克里斯·拉特纳及其团队为 macOS 和 iOS 开发工具，LLVM 成为了这些平台开发工具的一部分。 项目最初被命名为低级虚拟机（Low Level Virtual Machine）的首字母缩写。</p><h2 id="安装llvm" tabindex="-1"><a class="header-anchor" href="#安装llvm"><span>安装LLVM</span></a></h2><p>1.使用git拉取LLVM源代码。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">#使用浅克隆</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">git</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> clone</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> --depth</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;"> 1</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> https://github.com/llvm/llvm-project.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.进入llvm-project目录，创建一个build目录，进入build目录，使用cmake配置LLVM。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#EEF0F9;">cd</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> llvm-project</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">mkdir</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> build</span></span>
<span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#EEF0F9;">cd</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> build</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;"># cmake -S llvm -B build -G &lt;generator&gt; [options]</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">cmake</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> -S</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> llvm</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> -B</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> build</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> -G</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> Ninja</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;">  \\</span></span>
<span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;">  -DLLVM_ENABLE_PROJECTS=</span><span style="--shiki-light:#8DA101;--shiki-dark:#FFD493;">&#39;clang;mlir;lld&#39;</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;"> \\</span></span>
<span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;">  -DLLVM_BUILD_EXAMPLES=ON,</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;"> \\</span></span>
<span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;">  -DLLVM_TARGETS_TO_BUILD=</span><span style="--shiki-light:#8DA101;--shiki-dark:#FFD493;">&quot;Native;NVPTX&quot;</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;"> \\</span></span>
<span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;">  -DLLVM_ENABLE_RTTI=ON</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;"> \\</span></span>
<span class="line"><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;">  -DCMAKE_BUILD_TYPE=Debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我的环境是Windows上的WSL，使用的是<code>-G Ninja</code>。</p><ul><li>第一个选项用来构建clang编译器前端,lld连接器,和mlir多层级中间表达。</li><li>第二个选项用来生成样例程序。其中如果后续要学习MLIR的话这个EXAMPLES要记得开。不然那边教程的程序可能要自己另外写CmakeList.txt文件，来编译运行。</li><li>另外最后那个taget要根据自己的需求来配置Native：指的是主机架构，即构建 LLVM 的机器的架构。例如，如果你是在 x86_64 架构的 Intel CPU 上构建，那么 Native 就对应于 x86_64。 NVPTX：这是 NVIDIA PTX (Parallel Thread Execution) 虚拟架构，用于为 NVIDIA GPU 生成代码。 AMDGPU：这是 AMD GPU 的目标架构，支持 ROCm 平台上的 AMD GPU。如果你的电脑上是AMD的GPU，将NVPTX换成AMGGPU即可。其余按默认配置即可。</li><li>DLLVM_ENABLE_RTTI=ON。这个RTTI是运行时类型信息，这个选项是必须要开的。后面利用llvm来实现lox的时候，链接会报错，得重新来编译。</li></ul><ol start="3"><li>使用Ninja构建LLVM。</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;"># 8代表使用8个线程进行构建</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;"># 可以根据自己的电脑性能进行调整</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">ninja</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> -j</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;"> 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未完待续，最近收到两个面试通知，忙面试去了。</p>`,12)]))}const k=s(n,[["render",t]]),r=JSON.parse('{"path":"/compiler/5ln5fsdl/","title":"LLVM简介","lang":"zh-CN","frontmatter":{"title":"LLVM简介","createTime":"2024/12/12 14:58:57","permalink":"/compiler/5ln5fsdl/"},"readingTime":{"minutes":2.12,"words":635},"git":{"updatedTime":1739868697000,"contributors":[{"name":"TenThousandOne","username":"TenThousandOne","email":"w13852770506@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TenThousandOne?v=4","url":"https://github.com/TenThousandOne"},{"name":"TenOne506","username":"TenOne506","email":"w13852770506@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TenOne506?v=4","url":"https://github.com/TenOne506"}],"changelog":[{"hash":"a7ee6758ac8fa8ddab4e198401e0e17d45165dd7","time":1739868697000,"email":"w13852770506@163.com","author":"TenOne506","message":"update llvm compiler"}]},"filePathRelative":"notes/compiler/LLVM/LLVM简介.md","headers":[]}');export{k as comp,r as data};
