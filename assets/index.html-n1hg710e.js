import{_ as i,c as a,a as n,o as l}from"./app-Qg1dpqDJ.js";const t={};function e(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="一面" tabindex="-1"><a class="header-anchor" href="#一面"><span>一面</span></a></h2><p>这个当时没记录，现在来看有些问题记不得了。 面试官首先做了自我介绍，和部门业务的介绍，感觉还挺好的。随后拷打简历上的项目，和寻问到岗时间。</p><ol><li>多线程中问题，锁与条件变量</li><li>移动语义，移动完之后，再访问会遇见什么问题。</li><li>C++多态，虚函数</li><li>TCP三次握手和四次挥手的区别</li><li>给了一个多线程的代码，问我那里有问题，相当于伪代码，他说不要讲究语法。</li></ol><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;"> std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::vector</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::string</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&gt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> buffer_;</span></span>
<span class="line"><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;"> std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::mutex mutex_;</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> </span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;"> vod</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;"> GetBuffer</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> bucket_id</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">,</span><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;"> std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">string</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">*</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> result</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">)</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> {</span></span>
<span class="line"><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">    std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::lock_guard</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::mutex</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&gt;</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;"> guard</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(mutex_); </span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">    result</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">-&gt;</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">clear</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span></span>
<span class="line highlighted"><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">   *</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">result </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;"> buffer_</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[bucket_id];</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">    buffer</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[bucket_id]</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">-&gt;</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">clear</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> }</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> </span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;"> void</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;"> main</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">()</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> {</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">    // 把数据加载到buffer</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    。。。</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">	</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">    // 以下多线程执行</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    {</span></span>
<span class="line"><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">	 std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::string result;</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">         uint32_t</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> i </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;"> rand</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">() </span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">%</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;"> buffer_</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">size</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">         // 获取并打印</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">         GetBuffer</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(i, </span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&amp;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">result);</span></span>
<span class="line"><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">         std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::cout </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;&lt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> result </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;&lt;</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;"> &quot;</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;">\\n</span><span style="--shiki-light:#DFA000;--shiki-dark:#FFD493;">&quot;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">;</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我就说了一个锁的粒度，然后在他提示下说出来第7行那里可以用move，就这两个问题</p><ol start="6"><li>场景题，给你10亿个数据如何寻找中位数，这题被力扣hot100给害了。说一个最大堆和一个最小堆，实际上这两个堆都会拓展的。内存会爆掉。后面我还说了归并排序的思路，也是力扣上寻找两个有序数组中位数的思路，但感觉也没说明白。 最后面试官说应该用分桶来做，大概就是0-1000w的数据分一下，1000w-2000w来分一下，类似于这样，然后统计每个桶的大小，然后再细分就能找到中位数了。</li></ol><p>其他问题想起来再更新</p><p>接着就是手撕，手写智能指针，他给了模板 当时写的磕磕绊绊的，也是在他提醒下写对了</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">template</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">&lt;</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">typename</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;"> T</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">class</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;"> sharePtr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> {</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">  public</span><span style="--shiki-light:#5C6A72;--shiki-dark:#54B9FF;">:</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">    sharePtr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">T</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;"> *</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;">newptr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">);</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">    sharePtr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">sharePtr</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;"> &amp;</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;">sharePtr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">);</span></span>
<span class="line"><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">    ~sharePtr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">    sharePtr</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;"> &amp;</span><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;"> operator</span><span style="--shiki-light:#8DA101;--shiki-dark:#EEF0F9;">=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">sharePtr</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;"> &amp;</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;">sharePtr</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">);</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后问了模型量化的基本原理，问我知道哪一个。</p><p>还出了一道智力题:一条马路半小时有车经过的概率是90%，求5分钟有车经过的概率。 其实是概率题，他也提示了5分钟看成独立事件，但感觉我最后答的还是有些问题。 后面想了一会，应该是假设5分钟有车经过的概率是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>,那么五分钟没有车的概率是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">1-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>。 那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.9</mn><mo>=</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">0.9=1-(1-p)^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.9</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></p><p>最后又问了我一下到岗时间，我和他实话实话6月份，因为6月份有学校的中期。他说他们内部在讨论一下，当时给我吓坏了。</p><h2 id="二面" tabindex="-1"><a class="header-anchor" href="#二面"><span>二面</span></a></h2><p>一开始还是自我介绍了部门业务，做混元大模型的。</p><p>基本上从简历入手，问了一下研究生期间的方向。</p><p>先聊项目，让我挑一个熟的讲，我讲的CMU的哪个Neddle 深度学习框架。讲到矩阵乘的时候打断提问，其实就是写了个kernel,接着问我和标准库比较过没有，性能差多少。我说我没比较过，但是我看过cutlass的gemm实现，把gemm实现和他说一堆。</p><p>得知我的实现是使用了共享内存，就是一个他说他也不知道答案的问题，就是想知道我的理解。就是为什么GPU会对缓存进行编程，可以把共享内存理解成缓存嘛，而CPU这么多年，都没有对缓存编程。我说可能因为GPU是异构计算，而CPU在计算机里面占主要地位，他要无时无刻运行操作系统的指令，所以不能对他缓存进行编程。我想说的其实有点是这两个有点像房子装修的时候承重墙和非承重墙的区别。</p><p>又问了GEMM是访存密集型还是计算机密集型，答访存密集型。然后讲CPU一般实现的策略，假如C=A*B。问题会出按列读取B的时候，会造成缓存低下的问题，他问我解决策略，我说B转置，但是转置本身就会造成这样的问题。以及还说了一个错误的点，就是我提了一嘴Neddl里数组实现的那种逻辑计算索引的策略，但实际上没有改变内存存放。接着我就想到了分片，讲道理这个应该最先想到的，他说应该如何分高效，我说就CPU的一个缓存块可以把分片矩阵的一行都给放进去。</p><p>和面试官聊了好久RDMA的分离式内存。首先介绍了一下RDMA的通信流程，以及为什么高效，还是需要CPU的，但是会缺少CPU参与数据复制的那个过程。就是减少两次用户态和内核态切换的开销，以及在不使用0拷贝技术从内核缓冲区到用户缓冲区再到网卡缓冲区的过程。这一开始我说的很粗糙，面试官一步一步引导我说出来的。他从socket的recv引导我说了这些。</p><p>以及两台机子RDMA 8+8内存跑起来，和一台机器16内存跑起来哪个快，我说一台机子快。因我RDMA达不到内存的速度，接着就是内存的访问速率，我说在纳秒级，他说你直接说吞吐量，多少/s。我想了想说几百G-几千G，记不清了。 他反问我和分布式哪个好，我说分布式好。这个问题之前我也想过，因为分布式会多一个参与计算的节点。</p><p>接着又问了简历上的了解TVM，这个我之前跑过，大概就是从pytorch或者onnx模型导入tvm,生成中间件relay，之后会有一些自动调优的过程。这个时间有点久了，只记得这些了。第三个项目Lox解释器，我说参考书上实现的。说了一下编译原理的步骤，词法分析，语法分析，中间代码生成，后端代码生成和优化。词法分析那里说了一下NFA,DFA和正则表达式的内容，语法分析那说了递归下降语法分析和LL(1)语法，中间代码生成那里提了一下SSA模式，后端代码优化那里聊了一个mem2reg的优化。接着他举了一个for循环的例子，问我怎么解析。</p><p>然后问了简历上写的模型压缩方法，我说了剪枝和量化。感觉他挺满意的。</p><p>最后时间不够了他问了一道题，说思路就可以了。</p><p>两个有序数组求交集，第一反应就是双指针。他说还有没有什么高效的，其实当时想过一秒钟的二分法，毕竟有序。但被我否决了。后来又说了set，他说有开销。后来他提醒了一下，假如极端条件下一个很多，一个很少，我和他说二分，少的数组在多的数组里面二分查找左边界。</p><p>我当时觉得，已经有序的情况下，讲道理双指针跳起来应该很快的时间复杂度应该O(m+n);而二分应该不如双指针快的。</p><p>最后反问，部门氛围，轻松，但是也有压力。现在业务主要是all for 混元大模型。新人培养，有导师带，一开始不会特别难。</p><p>上下班时间，他说实习生早上有固定时间，晚上他们部门不会走的太早，但是是双休。我顺便拉踩了下拼多多。</p><p>最后我好像听到他提了一句，后面应该会推进流程，窃喜。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>TEG 机器学习平台部</p><ul><li>3.13打电话介绍业务并约面，时间约在3.14号晚上。</li><li>3.14晚面完之后，当晚秒过。</li><li>3.17打电话约复试，约3.19号。</li><li>3.19面完之后，第二天3.20，会议消失，流程显示还在复试中，以为有第三面。</li><li>3.21流程显示进入HR面，当晚HR约面，定在3.24。并且当晚发了云证。</li><li>期待3.24HR面之后的后续流程。期待offer</li><li>3.24 下午17.30hr面，大概十分钟。晚上19.40二面面试官打电话过来说没问题，流程走完之后加我个微信。</li><li>3.31 正式邮件offer</li></ul>`,31)]))}const k=i(t,[["render",e]]),r=JSON.parse('{"path":"/interview/fjaiilvp/","title":"腾讯机器学习平台部","lang":"zh-CN","frontmatter":{"title":"腾讯机器学习平台部","createTime":"2025/03/23 19:42:20","permalink":"/interview/fjaiilvp/"},"readingTime":{"minutes":7.11,"words":2132},"git":{"updatedTime":1746016727000,"contributors":[{"name":"TenOne506","username":"TenOne506","email":"w13852770506@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/TenOne506?v=4","url":"https://github.com/TenOne506"},{"name":"TenThousandOne","username":"TenThousandOne","email":"w13852770506@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TenThousandOne?v=4","url":"https://github.com/TenThousandOne"}],"changelog":[{"hash":"b2c6b8318cd76d05a7fb3175646b882937f4e89e","time":1746016727000,"email":"w13852770506@163.com","author":"TenThousandOne","message":"update search engine"}]},"filePathRelative":"notes/interview/腾讯机器学习平台部.md","headers":[]}');export{k as comp,r as data};
