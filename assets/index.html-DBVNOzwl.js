import{_ as i,c as a,a as n,o as t}from"./app-Qg1dpqDJ.js";const l={};function h(e,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="徒步旅行中补给问题" tabindex="-1"><a class="header-anchor" href="#徒步旅行中补给问题"><span><a href="https://www.marscode.cn/practice/8edw98y6q3x0n6?problem_id=7414004855076700204" target="_blank" rel="noopener noreferrer">徒步旅行中补给问题</a></span></a></h2><p>小R正在计划一次从地点A到地点B的徒步旅行，总路程需要 <code>N</code> 天。为了在旅途中保持充足的能量，小R每天必须消耗<code>1</code>份食物。幸运的是，小R在路途中每天都会经过一个补给站，可以先购买完食物后再消耗今天的<code>1</code>份食物。然而，每个补给站的食物每份的价格可能不同，并且小R在购买完食物后最多只能同时携带 <code>K</code> 份食物。</p><p>现在，小R希望在保证每天食物消耗的前提下，以最小的花费完成这次徒步旅行。你能帮助小R计算出最低的花费是多少吗？<br><strong>输入</strong><br> n 总路程需要的天数<br> k 小R最多能同时携带食物的份数<br> data[i] 第i天补给站每份食物的价格<br><strong>输出</strong><br> 返回完成这次徒步旅行的最小花费<br><strong>约束条件</strong><br> 1 &lt; n,k &lt; 1000 1 &lt; data[i] &lt; 10000</p><div class="demo-wrapper"><div class="demo-head"><div class="demo-ctrl"><i></i><i></i><i></i></div></div><div class="demo-container"><p>样例1：<br> 输入：n = 5 ,k = 2 ,data = [1, 2, 3, 3, 2]<br> 输出：9<br> 样例2：<br> 输入：n = 6 ,k = 3 ,data = [4, 1, 5, 2, 1, 3]<br> 输出：9<br> 样例3：<br> 输入：n = 4 ,k = 1 ,data = [3, 2, 4, 1]<br> 输出：10\\</p></div></div><p>这个题看起来简单，实际挺复杂的。直接看思路。 这样我们可以从未来向过去考虑，当我们步行到某一天时，我们可以选择在之前购买食物，而不是在当前天购买。这样，我们可以通过维护一个单调递增的双端队列来记录当前窗口内的最小价格，从而在每次购买食物时选择最便宜的选项。通过滑动窗口的方式，逐步计算出每天的最小花费，最终得到总的最小花费。<br> 这时候就要用高育良的那句话了:<strong>看未来远不如看过去，要来的清楚。</strong> <br> 给出解题过程：</p><ol><li>初始化：创建一个双端队列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">mins</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">min</span><span class="mord mathnormal">s</span></span></span></span> 用于存储当前窗口内的最小价格及其对应的天数。初始化结果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">res</span><span class="mord mathnormal">u</span><span class="mord mathnormal">lt</span></span></span></span> 为0。 遍历每一天：</li><li><ul><li>维护单调队列：在每次遍历中，首先检查队列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">mins</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">min</span><span class="mord mathnormal">s</span></span></span></span> 的末尾元素，如果其价格大于当前天的价格，则将其弹出，直到队列为空或队列末尾元素的价格小于等于当前天的价格。然后将当前天的价格和天数加入队列。</li><li>滑动窗口：检查队列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">mins</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">min</span><span class="mord mathnormal">s</span></span></span></span> 的头部元素，如果其对应的天数已经不在当前窗口内（即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>s</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mo>=</mo><mi>j</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">mins[0][0] &lt;= j - k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>），则将其弹出。</li><li>计算花费：将当前窗口内的最小价格（即队列头部元素的价格）累加到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">res</span><span class="mord mathnormal">u</span><span class="mord mathnormal">lt</span></span></span></span> 中。</li></ul></li><li>返回结果：遍历结束后，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">res</span><span class="mord mathnormal">u</span><span class="mord mathnormal">lt</span></span></span></span> 即为完成徒步旅行的最小花费。</li></ol><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#5c6a72;--shiki-dark:#eef0f9;--shiki-light-bg:#fdf6e3;--shiki-dark-bg:#17191e;"><pre class="shiki shiki-themes everforest-light houston vp-code"><code><span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;"> solution</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">,</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;"> int</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> k</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">,</span><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;"> std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::</span><span style="--shiki-light:#3A94C5;--shiki-dark:#ACAFFF;">vector</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&lt;</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&gt;</span><span style="--shiki-light:#5C6A72;--shiki-light-font-style:inherit;--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">)</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> {</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">  //// 初始化一个存储键值对的双端队列 mins，以及结果变量 result</span></span>
<span class="line"><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">  std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::deque</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#35A77C;--shiki-dark:#EEF0F9;">std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::pair</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">, </span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&gt;&gt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> mins;</span></span>
<span class="line"><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">  int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> result </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;"> 0</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">;</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">  // 遍历每一天</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">  for</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> (</span><span style="--shiki-light:#3A94C5;--shiki-dark:#54B9FF;">int</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> j </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">=</span><span style="--shiki-light:#DF69BA;--shiki-dark:#FFD493;"> 0</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">; j </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">&lt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> n; </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">++</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">j) {</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">    // 维护单调栈：如果双端队列 mins 的尾部元素的价格高于当前天的价格，将尾部元素弹出</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">    while</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> (</span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">!</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">empty</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">() </span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">&amp;&amp;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;"> mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">back</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">()</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">second</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;"> &gt;</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;"> data</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[j]) {</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">      mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">pop_back</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    }</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">    // 将当前天的索引和价格作为键值对添加到双端队列尾部</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">    mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">push_back</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(</span><span style="--shiki-light:#35A77C;--shiki-dark:#ACAFFF;">std</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">::</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">make_pair</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">(j, </span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">data</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">[j]));</span></span>
<span class="line"><span style="--shiki-light:#939F91;--shiki-light-font-style:italic;--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;">    // 如果双端队列头部元素的索引小于等于 j - k，将头部元素弹出</span></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">    while</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> (</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">front</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">()</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">first</span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;"> &lt;=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> j </span><span style="--shiki-light:#F57D26;--shiki-dark:#EEF0F9;">-</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> k) {</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">      mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">pop_front</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">();</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    }</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">    result </span><span style="--shiki-light:#F57D26;--shiki-dark:#54B9FF;">+=</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;"> mins</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#8DA101;--shiki-dark:#00DAEF;">front</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">()</span><span style="--shiki-light:#939F91;--shiki-dark:#EEF0F9;">.</span><span style="--shiki-light:#5C6A72;--shiki-dark:#4BF3C8;">second</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">;</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F85552;--shiki-dark:#54B9FF;">  return</span><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;"> result;</span></span>
<span class="line"><span style="--shiki-light:#5C6A72;--shiki-dark:#EEF0F9;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const k=i(l,[["render",h]]),r=JSON.parse('{"path":"/code/007uzhd9/","title":"徒步旅行中补给问题","lang":"zh-CN","frontmatter":{"title":"徒步旅行中补给问题","createTime":"2024/12/10 20:43:47","permalink":"/code/007uzhd9/"},"readingTime":{"minutes":3.07,"words":922},"git":{"updatedTime":1734096157000,"contributors":[{"name":"TenThousandOne","username":"TenThousandOne","email":"w13852770506@163.com","commits":4,"avatar":"https://avatars.githubusercontent.com/TenThousandOne?v=4","url":"https://github.com/TenThousandOne"}],"changelog":[{"hash":"24faca8c581b3c2e9cc8a9232b2e9fa470384bec","time":1734096157000,"email":"w13852770506@163.com","author":"TenThousandOne","message":"prepare interview"}]},"filePathRelative":"notes/code/单调队列/徒步旅行中补给问题.md","headers":[]}');export{k as comp,r as data};
